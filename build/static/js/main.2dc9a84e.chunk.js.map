{"version":3,"sources":["types/enums.ts","components/ChessComp/index.tsx","components/BoardComp/index.tsx","components/GameStatus/index.tsx","components/GameComp/index.tsx","App.tsx","index.tsx"],"names":["ChessType","GameStatus","ChessComp","props","chess","type","red","className","black","onClick","none","BoardComp","list","chesses","map","i","key","isGameOver","GameStatusComp","title","status","gaming","blackWin","redWin","equal","GameComp","state","gameStatus","nextChess","this","init","arr","push","setState","index","console","log","getStatus","horMin","Math","floor","verMin","includes","handleClick","bind","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2dc9a84e.chunk.js","sourcesContent":["export enum ChessType{\r\n  none,\r\n  red,\r\n  black\r\n}\r\n\r\nexport enum GameStatus{\r\n  /**\r\n   * 正在游戏中\r\n   */\r\n  gaming, \r\n  /**\r\n   * 红方胜利\r\n   */\r\n  redWin,\r\n  /**\r\n   * 黑方胜利\r\n   */\r\n  blackWin,\r\n  /**\r\n   * 平局\r\n   */\r\n  equal\r\n}","import React from \"react\";\r\nimport { ChessType } from \"../../types/enums\";\r\nimport \"./index.css\";\r\n\r\ninterface IProps {\r\n  type: ChessType,\r\n  onClick?: () => void\r\n}\r\n\r\nexport const ChessComp: React.FC<IProps> = function (props) {\r\n  let chess = null;\r\n  if (props.type === ChessType.red) {\r\n    chess = <div className=\"chess-item red\"></div>\r\n  } else if (props.type === ChessType.black) {\r\n    chess = <div className=\"chess-item black\"></div>\r\n  }\r\n  return (\r\n    <div className=\"chess\" onClick={() => {\r\n      if(props.type === ChessType.none && props.onClick){\r\n        props.onClick();\r\n      } \r\n    }}>\r\n      {chess}\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport { ChessType } from \"../../types/enums\";\r\nimport { ChessComp } from '../ChessComp';\r\nimport \"./index.css\";\r\n\r\ninterface IProps {\r\n  chesses: ChessType[],\r\n  isGameOver?: boolean,\r\n  onClick?: (index: number) => void\r\n}\r\n\r\n\r\n\r\nexport function BoardComp(props: IProps) {\r\n  const list = props.chesses.map((type, i) => <ChessComp type={type} key={i} onClick={() => { if (props.onClick && !props.isGameOver) { props.onClick(i) } }}></ChessComp>)\r\n  return (\r\n    <div className=\"board\">\r\n      {list}\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport { GameStatus } from \"../../types/enums\";\r\nimport './index.css';\r\n\r\ninterface IProps {\r\n  status: GameStatus\r\n}\r\n\r\nexport function GameStatusComp(props: IProps) {\r\n  let title: string = '';\r\n  if (props.status === GameStatus.gaming) {\r\n    title = '游戏中'\r\n  } else if (props.status === GameStatus.blackWin) {\r\n    title = '黑方胜'\r\n  } else if (props.status === GameStatus.redWin) {\r\n    title = '红方胜'\r\n  } else if (props.status === GameStatus.equal) {\r\n    title = '平局'\r\n  } else {\r\n    title = '游戏异常'\r\n  }\r\n  return (\r\n    <div className=\"title\">\r\n      {title}\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport { ChessType, GameStatus } from \"../../types/enums\";\r\nimport { BoardComp } from \"../BoardComp\";\r\nimport { GameStatusComp } from \"../GameStatus\";\r\n\r\ninterface IState {\r\n  chesses: ChessType[],\r\n  gameStatus: GameStatus,\r\n  nextChess: ChessType.red | ChessType.black\r\n}\r\n\r\n\r\nexport class GameComp extends React.Component<{}, IState>{\r\n\r\n  state: IState = {\r\n    chesses: [],\r\n    gameStatus: GameStatus.gaming,\r\n    nextChess: ChessType.black\r\n  }\r\n  componentDidMount() {\r\n    this.init();\r\n  }\r\n  /**\r\n   * 初始化\r\n   */\r\n  init() {\r\n    const arr: ChessType[] = [];\r\n    for (let i = 0; i < 9; i++) {\r\n      arr.push(ChessType.none);\r\n    }\r\n    this.setState({\r\n      chesses: arr,\r\n      gameStatus: GameStatus.gaming,\r\n      nextChess: ChessType.black\r\n    })\r\n  }\r\n  handleClick(index: number) {\r\n    console.log(index);\r\n    const chesses = [...this.state.chesses]\r\n    chesses[index] = this.state.nextChess;\r\n    this.setState({\r\n      chesses,\r\n      nextChess: this.state.nextChess === ChessType.red ? ChessType.black : ChessType.red,\r\n      gameStatus: this.getStatus(chesses, index)\r\n    })\r\n  }\r\n\r\n  getStatus(chesses: ChessType[], index: number): GameStatus {\r\n    // 1. 判断是否有一方获得胜利\r\n    const horMin = Math.floor(index / 3) * 3;\r\n    const verMin = index % 3;\r\n    if (\r\n      (chesses[horMin] === chesses[horMin + 1] && chesses[horMin] === chesses[horMin + 2])  // 横向\r\n      || (chesses[verMin] === chesses[verMin + 3] && chesses[verMin] === chesses[verMin + 6])    // 纵向\r\n    ) {  // 横向全部相等  , 有一方胜利\r\n      if (chesses[horMin] === ChessType.red) {\r\n        console.log(\"红胜\")\r\n        return GameStatus.redWin\r\n      } else if (chesses[horMin] === ChessType.black) {\r\n        console.log(\"黑胜\")\r\n        return GameStatus.blackWin\r\n      } else {\r\n        return GameStatus.gaming;\r\n      }\r\n    } else if (\r\n      (chesses[0] === chesses[4] && chesses[0] === chesses[8])                                // 斜向\r\n      || (chesses[2] === chesses[4] && chesses[2] === chesses[6])                                // 斜向\r\n    ) {\r\n      if (chesses[4] === ChessType.red) {\r\n        console.log(\"红胜\")\r\n        return GameStatus.redWin\r\n      } else if (chesses[4] === ChessType.black) {\r\n        console.log(\"黑胜\")\r\n        return GameStatus.blackWin\r\n      } else {\r\n        return GameStatus.gaming;\r\n      }\r\n    } else if (chesses.includes(ChessType.none)) {\r\n      // 2. 游戏正在进行中\r\n      console.log(\"进行中\")\r\n      return GameStatus.gaming\r\n      // 3. 判断是否平局\r\n    } else {\r\n      console.log(\"平局\")\r\n      return GameStatus.equal\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game\">\r\n        <GameStatusComp status={this.state.gameStatus}></GameStatusComp>\r\n        <BoardComp chesses={this.state.chesses} isGameOver={this.state.gameStatus !== GameStatus.gaming} onClick={this.handleClick.bind(this)}></BoardComp>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\n\nimport { GameComp } from './components/GameComp';\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <GameComp></GameComp>      \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}